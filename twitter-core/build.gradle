/*
 * Copyright (C) 2015 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */


apply plugin: 'com.android.library'

android {
    compileSdkVersion 24
    buildToolsVersion "24"

    defaultConfig {
        versionCode 1
        versionName version
        minSdkVersion 12
        consumerProguardFiles 'proguard.txt'
    }

    def scribeEndpointOverride
    if (project.hasProperty('scribeEndpointOverride')) {
        scribeEndpointOverride = project.getProperty('scribeEndpointOverride')
    } else {
        scribeEndpointOverride = ''
    }
    def scribeSequence
    if (project.hasProperty("scribeSequence")) {
        scribeSequence = project.getProperty('scribeSequence')
    } else {
        scribeSequence = ''
    }

    buildTypes {
        debug {
            buildConfigField "String", "GROUP", "\"com.android.sdk.twitter\""
            buildConfigField "String", "ARTIFACT_ID", "\"twitter-core\""
            buildConfigField "String", "BUILD_NUMBER", "\"dev\""
            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
            buildConfigField "String", "SCRIBE_ENDPOINT_OVERRIDE", "\"${scribeEndpointOverride}\""
            buildConfigField "String", "SCRIBE_SEQUENCE", "\"${scribeSequence}\""
        }

        release {
            buildConfigField "String", "GROUP", "\"com.android.sdk.twitter\""
            buildConfigField "String", "ARTIFACT_ID", "\"twitter-core\""
            buildConfigField "String", "BUILD_NUMBER", "\"dev\""
            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
            buildConfigField "String", "SCRIBE_ENDPOINT_OVERRIDE", "\"${scribeEndpointOverride}\""
            buildConfigField "String", "SCRIBE_SEQUENCE", "\"${scribeSequence}\""
        }
    }

    lintOptions {
        warningsAsErrors true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {

    compile 'io.fabric.sdk.android:fabric:1.3.+@aar'
    compile 'com.squareup.retrofit:retrofit:1.8.0'
    compile 'com.google.code.gson:gson:2.4'

    debugCompile 'io.fabric.sdk.android:fabric-test:0.0.+@aar'

    provided 'com.squareup.okhttp:okhttp:2.3.0'
    provided 'com.squareup.okhttp:okhttp-urlconnection:2.3.0'

    androidTestCompile ('junit-addons:junit-addons:1.4') {
        transitive = false
    }

    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile 'io.fabric.sdk.android:fabric-test:0.0.+@aar'

    testCompile 'io.fabric.sdk.android:fabric-test:0.0.+@aar'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.maven:maven-ant-tasks:2.1.3'
    testCompile('org.robolectric:robolectric:3.0') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile ('junit-addons:junit-addons:1.4') {
        transitive = false
    }

}
